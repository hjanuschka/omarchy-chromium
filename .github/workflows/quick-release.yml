name: Quick Release (Skip Build)

on:
  push:
    branches:
      - 'release-test/**'
    tags:
      - 'quick-release-*'
  workflow_dispatch:

jobs:
  quick-release:
    runs-on: self-hosted
    timeout-minutes: 30  # Much shorter since we skip the build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up environment
        run: |
          echo "=== Quick Release Environment ==="
          echo "Started at: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Trigger: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "This workflow uses SKIP_BUILD=1 for testing AUR releases"
          echo "do_update.sh will automatically increment pkgrel"
          
      - name: Check for built Chromium source
        run: |
          echo "=== Checking for Built Chromium Source ==="
          
          CHROMIUM_SRC_DIR="$HOME/omarchy-chromium-src/src"
          
          if [[ ! -d "$CHROMIUM_SRC_DIR" ]]; then
            echo "❌ Chromium source directory not found at $CHROMIUM_SRC_DIR"
            echo "Please run a full build first to create the source checkout"
            exit 1
          fi
          
          # Check if build output exists
          if [[ -f "$CHROMIUM_SRC_DIR/out/Release/chrome" ]]; then
            echo "✅ Found built Chromium at $CHROMIUM_SRC_DIR/out/Release/chrome"
            BUILD_SIZE=$(du -h "$CHROMIUM_SRC_DIR/out/Release/chrome" | cut -f1)
            echo "Chrome binary size: $BUILD_SIZE"
          else
            echo "❌ Built Chrome binary not found at $CHROMIUM_SRC_DIR/out/Release/chrome"
            echo "Please run a full build first"
            exit 1
          fi
          
      - name: Build package with SKIP_BUILD=1 
        run: |
          echo "=== Building Package (SKIP_BUILD=1) ==="
          echo "This will package existing built binaries without recompiling"
          
          # Increment pkgrel for this quick release
          CURRENT_PKGREL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          NEW_PKGREL=$((CURRENT_PKGREL + 1))
          sed -i "s/^pkgrel=.*/pkgrel=$NEW_PKGREL/" PKGBUILD
          echo "Updated pkgrel from $CURRENT_PKGREL to $NEW_PKGREL"
          
          # Run makepkg with SKIP_BUILD=1 environment variable
          # PKGBUILD now uses _skip_build=${SKIP_BUILD:-0} to check this env var
          echo "Running: SKIP_BUILD=1 makepkg -s --noconfirm"
          SKIP_BUILD=1 makepkg -s --noconfirm
          
          # Check that package was created
          PKGNAME=$(grep '^pkgname=' PKGBUILD | cut -d'=' -f2)
          PKGVER=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
          PKGREL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
          PACKAGE_FILE="${PKGNAME}-${PKGVER}-${PKGREL}-x86_64.pkg.tar.zst"
          
          if [[ -f "$PACKAGE_FILE" ]]; then
            echo "✅ Package created: $PACKAGE_FILE"
            PACKAGE_SIZE=$(du -h "$PACKAGE_FILE" | cut -f1)
            echo "Package size: $PACKAGE_SIZE"
          else
            echo "❌ Package creation failed: $PACKAGE_FILE not found"
            exit 1
          fi
          
      - name: Create GitHub release and update AUR
        run: |
          echo "=== Creating Release and Updating AUR ==="
          
          # Now run do_update.sh with SKIP_BUILD=1 to handle GitHub release and AUR update
          # Since we already created the package, this will use the existing package file
          chmod +x do_update.sh
          SKIP_BUILD=1 ./do_update.sh
          
      - name: Commit PKGBUILD changes (quick release)
        run: |
          echo "=== Committing PKGBUILD Changes (Quick Release) ==="
          
          # Configure git for the action
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if PKGBUILD was modified (do_update.sh increments pkgrel)
          if git diff --quiet PKGBUILD; then
            echo "No PKGBUILD changes to commit"
          else
            echo "PKGBUILD was modified, committing changes..."
            
            # Get version info for commit message
            PKGVER=$(grep '^pkgver=' PKGBUILD | cut -d'=' -f2)
            PKGREL=$(grep '^pkgrel=' PKGBUILD | cut -d'=' -f2)
            
            git add PKGBUILD
            git commit -m "Quick release ${PKGVER}-${PKGREL}

            Automated quick release via GitHub Actions workflow.
            Built from existing binaries (SKIP_BUILD=1)."
            
            # Push the commit
            git push
            echo "✅ PKGBUILD changes committed and pushed"
          fi
          
      - name: Summary
        if: always()
        run: |
          echo "=== Quick Release Summary ==="
          echo "Finished at: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "Purpose: Test AUR release process without rebuilding"
          
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Quick release completed successfully"
            echo "Package has been released to GitHub and AUR updated"
          else
            echo "❌ Quick release failed - check logs above"
          fi